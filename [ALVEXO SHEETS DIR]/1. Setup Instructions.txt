1. Copy FSB Data Source.mq4 to scripts folder
2. Run script
3. Copy file "DataSource_Alvexo MT4 Terminal.json" from 
C:\Users\Wales\AppData\Roaming\MetaQuotes\Terminal\9BE8613EAFD14C6112BCABDB49D150F5\MQL4\Files
4. Goto https://json-csv.com/ to get csv file.
6. Copy file DDE Sample to desktop. Source: Eg C:\Program Files (x86)\Alvexo MT4 Terminal" or from templates to workng directories
[20210801  I am not sure this comment is valid  ie.  We do not need this step]
6.1 Enable DDE Server in MT4, you may have to run as Administrator too.
5. Open openoffice as "administrator", then file, save as ODF file.
6. Delete first 3 cols. Save as symbolsource.csv
8. copy file temlpate "DataSource_Alvexo MT4 Terminal.ods" and open.
9. Prefill "DataSource_Alvexo MT4 Terminal" sheet with values fron symbolsource.csv 

Change
-------
csv is now updated ia "link" , updated by MQL ea.  Prices and historical prices update eery second.  Indicator data takes 30secs....





CALC Change Event
=====================
The mentioned cases need different treatment, and only for the editing of contents there is a simple solution: Every sheet raises a respective event if the content of at least one cell was edited. You can assign your routine (script) to the dialog's list item 'Content changed' accessible via the sheet-tab's context menu item 'Sheet Events...'.

Please note:
-1- Despite its name the event is also risen if the content was edited, but in the end set unchanged. Even using 'Del' on a blank cell raises the event. The event is not risen if an entered process of editing was cancelled ('Esc').
-2- The called routine gets passed one parameter (say pEvent) telling you what cells were edited.
-3- The value of pEvent is an object that can be of two different types: SheetCellRange or SheetCellRanges. The case of a single cell is subsumed under the first case. The cases must be distinguished by your code.

To listen to any different kind of changing cell properties - if supported at all - will need to explicitly register a listener. I doubt if you will get a respective tutorial in a forum. You will need to study "the literatur", I'm afraid. Be prepared to experience problems on your pursuit of information.
Example: https://api.libreoffice.org/docs/idl/...

===Edit1 2019-03-24 18:31 UTC===
With respect to my comment to the answer by the OQ I post the following code.

Sub markiereBearbeitet(oEvent)
REM Wolfgang Jäger 2019-03-25
oDoc              = ThisComponent
oSheet = oEvent.Spreadsheet
If Not oEvent.supportsService("com.sun.star.sheet.SheetCell") Then Exit Sub
If NOT (oEvent.CellStyle="csForEditing") Then Exit Sub
oEvent.CellStyle  ="csEdited"
With oEvent.CellAddress
  oNeighbour        = oSheet.getCellByPosition(.Column + 1, .Row)
End With
oNeighbour.String = "bearbeitet"
End Sub

To get it work as intended you need to create the cell styles "csForEditing" (which may otherwise be identiacal to "Default") and "csEdited" ("bearbeitet"), and to apply "csForEditing" to all the cells you want to apply the Sub when edited later. This way you may edit other cells without triggering the "bearbeitet" effacts.
Having finished you can filter the rows containing the keyword in the cell right next to the edited cells.

link
add a comment
0
answered Mar 25 '19

rolf gravatar image
rolf
3 ?1 ?2
updated Apr 4 '19

Thank you very much. The "Sheet Events" with its "Content changed" trigger was what I was looking for (and what I was not aware of).

I ended up assigning a cell style for edited cells as follows. That's enough for my use case.

Sub Main
Dim ODoc As Object
Dim OCell As Object
oDoc = ThisComponent
oCell = oDoc.GetCurrentSelection()
If Not oCell.supportsService("com.sun.star.sheet.SheetCellRange") Then Exit Sub
If (oCell.Columns().Count() > 1) Then Exit Sub
If (oCell.Rows().Count() > 1) Then Exit Sub

oCell.CellStyle="bearbeitet"
End Sub
This has been assigned to Sheet Events / Contents changed; it does not include a case of SheetCellRanges, but it does its job as I need it right now.