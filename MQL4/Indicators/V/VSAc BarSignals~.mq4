/*
   Generated by ex4-to-mq4 decompiler FREEWARE 4.0.451.5
   Website: htt P://w ww.m E T A QuO T Es. N e T
   E-mail : suP p ORT @MeTA Q U OtE s.N E t
*/
#property copyright "Copyright © 2008, FOREXflash Software Corp."
#property link      "http://www.metaquotes.net"

#property indicator_chart_window
#property indicator_buffers 8
#property indicator_color1 White
#property indicator_color2 Lime
#property indicator_color3 Red
#property indicator_color4 Yellow
#property indicator_color5 Red
#property indicator_color6 Lime
#property indicator_color7 Orange
#property indicator_color8 LightGreen

extern int NumberOfBars = 300;
extern double Offset = 150.0;
extern double Offset1 = 50.0;
extern double Offset2 = 100.0;
double G_ibuf_104[];
double G_ibuf_108[];
double G_ibuf_112[];
double G_ibuf_116[];
double G_ibuf_120[];
double G_ibuf_124[];
double G_ibuf_128[];
double G_ibuf_132[];
int Gi_136 = 0;

int init() {
   string Ls_0 = "2030.07.06";
   int str2time_8 = StrToTime(Ls_0);
   if (TimeCurrent() >= str2time_8) {
      Alert("The trial version expired! Contact forexflash@gmail.com");
      return (1);
   }
   Offset *= Point;
   Offset1 *= Point;
   Offset2 = Offset * Point;
   SetIndexBuffer(0, G_ibuf_104);
   SetIndexStyle(0, DRAW_ARROW);
   SetIndexArrow(0, 119);
   SetIndexLabel(0, "Reversal");
   SetIndexBuffer(1, G_ibuf_108);
   SetIndexStyle(1, DRAW_ARROW);
   SetIndexArrow(1, 233);
   SetIndexLabel(1, "Demand");
   SetIndexBuffer(2, G_ibuf_112);
   SetIndexStyle(2, DRAW_ARROW);
   SetIndexArrow(2, 234);
   SetIndexLabel(2, "Supply");
   SetIndexBuffer(3, G_ibuf_116);
   SetIndexStyle(3, DRAW_ARROW);
   SetIndexArrow(3, SYMBOL_STOPSIGN);
   SetIndexLabel(3, "Reversal");
   SetIndexBuffer(4, G_ibuf_120);
   SetIndexStyle(4, DRAW_ARROW);
   SetIndexArrow(4, 159);
   SetIndexLabel(4, "SStopingVolume");
   SetIndexBuffer(5, G_ibuf_124);
   SetIndexStyle(5, DRAW_ARROW);
   SetIndexArrow(5, 159);
   SetIndexLabel(5, "BStopingVolume");
   SetIndexBuffer(6, G_ibuf_128);
   SetIndexStyle(6, DRAW_ARROW);
   SetIndexArrow(6, 119);
   SetIndexLabel(6, "SELLReversal");
   SetIndexBuffer(7, G_ibuf_132);
   SetIndexStyle(7, DRAW_ARROW);
   SetIndexArrow(7, 119);
   SetIndexLabel(7, "BUYReversal");
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   double Ld_0;
   double Ld_8;
   double ivolume_16;
   double ivolume_24;
   VPA();
   int Li_36 = IndicatorCounted();
   if (Li_36 > 0) Li_36--;
   int Li_32 = NumberOfBars;
   for (int Li_40 = Li_32; Li_40 >= 0; Li_40--) {
      Ld_0 = High[Li_40 + 1] - (Low[Li_40 + 1]);
      Ld_8 = High[Li_40 + 2] - (Low[Li_40 + 2]);
      G_ibuf_104[Li_40] = 0;
      G_ibuf_108[Li_40] = 0;
      G_ibuf_112[Li_40] = 0;
      G_ibuf_116[Li_40] = 0;
      ivolume_16 = iVolume(NULL, 0, Li_40 + 1);
      ivolume_24 = iVolume(NULL, 0, Li_40 + 2);
      if (Ld_0 > Ld_8) {
         if (ivolume_16 < ivolume_24) {
            if (High[Li_40 + 1] - (Close[Li_40 + 1]) < Close[Li_40 + 1] - (Low[Li_40 + 1])) {
               G_ibuf_104[Li_40 + 1] = High[Li_40 + 1] + Offset;
               G_ibuf_112[Li_40 + 1] = 0;
            }
            if (High[Li_40 + 1] - (Close[Li_40 + 1]) > Close[Li_40 + 1] - (Low[Li_40 + 1])) {
               G_ibuf_104[Li_40 + 1] = Low[Li_40 + 1] - Offset;
               G_ibuf_108[Li_40 + 1] = 0;
            }
         }
         if (ivolume_16 > ivolume_24) {
            if (High[Li_40 + 1] - (Close[Li_40 + 1]) < Close[Li_40 + 1] - (Low[Li_40 + 1])) {
               G_ibuf_108[Li_40 + 1] = Low[Li_40 + 1] - Offset;
               G_ibuf_104[Li_40 + 1] = 0;
            }
            if (High[Li_40 + 1] - (Close[Li_40 + 1]) > Close[Li_40 + 1] - (Low[Li_40 + 1])) {
               G_ibuf_112[Li_40 + 1] = High[Li_40 + 1] + Offset;
               G_ibuf_104[Li_40 + 1] = 0;
            }
         }
      }
      if (Ld_0 < Ld_8)
         if (ivolume_16 > ivolume_24) G_ibuf_116[Li_40 + 1] = High[Li_40 + 1] + Offset;
   }
   return (0);
}

int VPA() {
   if (Bars <= 10) return (0);
   Gi_136 = IndicatorCounted();
   if (Gi_136 < 0) return (-1);
   if (Gi_136 > 0) Gi_136--;
   int Li_8 = Bars - Gi_136 - 1;
   int Li_unused_12 = Li_8;
   int Li_unused_4 = 1;
   while (Li_8 >= 0) {
      if (Close[Li_8 + 3] < Close[Li_8 + 2] && Close[Li_8 + 2] < Close[Li_8 + 1] && Close[Li_8 + 1] >= Close[Li_8])
         if (Volume[Li_8 + 3] < Volume[Li_8 + 2] && Volume[Li_8 + 2] < Volume[Li_8 + 1] && Volume[Li_8 + 1] > Volume[Li_8]) G_ibuf_120[Li_8 + 1] = High[Li_8 + 1] + Offset1;
      if (Close[Li_8 + 3] > Close[Li_8 + 2] && Close[Li_8 + 2] > Close[Li_8 + 1] && Close[Li_8 + 1] <= Close[Li_8])
         if (Volume[Li_8 + 3] < Volume[Li_8 + 2] && Volume[Li_8 + 2] < Volume[Li_8 + 1] && Volume[Li_8 + 1] > Volume[Li_8]) G_ibuf_124[Li_8 + 1] = Low[Li_8 + 1] - Offset1;
      if (Close[Li_8 + 3] < Close[Li_8 + 2] && Close[Li_8 + 2] < Close[Li_8 + 1] && Low[Li_8 + 1] >= Close[Li_8])
         if (Volume[Li_8 + 3] < Volume[Li_8 + 2] && Volume[Li_8 + 2] < Volume[Li_8 + 1] && Volume[Li_8 + 1] > Volume[Li_8]) G_ibuf_128[Li_8 + 1] = High[Li_8 + 1] + Offset2;
      if (Close[Li_8 + 3] > Close[Li_8 + 2] && Close[Li_8 + 2] > Close[Li_8 + 1] && High[Li_8 + 1] <= Close[Li_8])
         if (Volume[Li_8 + 3] < Volume[Li_8 + 2] && Volume[Li_8 + 2] < Volume[Li_8 + 1] && Volume[Li_8 + 1] > Volume[Li_8]) G_ibuf_132[Li_8 + 1] = Low[Li_8 + 1] - Offset2;
      Li_8--;
   }
   return (0);
}