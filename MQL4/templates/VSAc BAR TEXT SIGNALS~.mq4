/*
   Generated by ex4-to-mq4 decompiler FREEWARE 4.0.451.5
   Website:  h tt P:/ /W w w. mE T AQUO teS.N e t
   E-mail :  S U pp oRt @me tA qu O T e s . N E t
*/
#property copyright "Copyright © 2008, FOREXflash Software Corp."
#property link      "http://www.metaquotes.net"

#property indicator_chart_window
#property indicator_buffers 7
#property indicator_color1 Black
#property indicator_color2 Black
#property indicator_color3 Black
#property indicator_color4 Black
#property indicator_color5 Black
#property indicator_color6 Black
#property indicator_color7 Black

extern int MA_Length = 100;
extern int ShiftUpText = 0;
extern int ShiftDownText = 0;
extern int SizeText = 7;
extern int AngleText = 90;
extern int Corner = 4;
int Gi_100 = 500;
double G_ibuf_104[];
double G_ibuf_108[];
double G_ibuf_112[];
double G_ibuf_116[];
double G_ibuf_120[];
string Gs_unused_124;
int Gi_132 = 1;
double Gd_136;
double Gd_144;

int init() {
   string Ls_0 = "2030.06.12";
   int str2time_8 = StrToTime(Ls_0);
   if (TimeCurrent() >= str2time_8) {
      Alert("The trial version expired! Contact forexflash@gmail.com");
      return (1);
   }
   SetIndexBuffer(0, G_ibuf_104);
   SetIndexStyle(0, DRAW_NONE);
   SetIndexBuffer(1, G_ibuf_108);
   SetIndexStyle(1, DRAW_NONE);
   SetIndexBuffer(2, G_ibuf_112);
   SetIndexStyle(2, DRAW_NONE);
   SetIndexBuffer(5, G_ibuf_116);
   SetIndexStyle(5, DRAW_NONE);
   SetIndexBuffer(6, G_ibuf_120);
   SetIndexStyle(6, DRAW_NONE);
   string Ls_12 = "VSA© BAR TEXT SIGNALS";
   IndicatorShortName(Ls_12);
   Gs_unused_124 = Ls_12;
   IndicatorDigits(1);
   Gd_136 = ShiftUpText * Point;
   Gd_144 = ShiftDownText * Point;
   return (1);
}

int deinit() {
   datetime time_0;
   string name_4;
   for (int index_12 = 0; index_12 < Bars; index_12++) {
      time_0 = Time[index_12];
      name_4 = "NDS_" + time_0;
      if (ObjectFind(name_4) >= 0) ObjectDelete(name_4);
      name_4 = "Suppl_" + time_0;
      if (ObjectFind(name_4) >= 0) ObjectDelete(name_4);
   }
   ObjectsDeleteAll(0, OBJ_LABEL);
   return (0);
}

int start() {
   string Ls_0 = "2030.06.12";
   int str2time_8 = StrToTime(Ls_0);
   if (TimeCurrent() >= str2time_8) {
      Alert("The trial version expired! Contact forexflash@gmail.com");
      return (1);
   }
   AVGSpread();
   AVGVolume();
   return (0);
}

int AVGSpread() {
   int Li_8 = IndicatorCounted();
   if (Li_8 > 0) Li_8--;
   int Li_4 = Bars - Li_8;
   for (int Li_0 = 0; Li_0 < Li_4; Li_0++) G_ibuf_108[Li_0] = (iHigh(NULL, 0, Li_0) - iLow(NULL, 0, Li_0)) / Point / Gi_132;
   for (Li_0 = 0; Li_0 < Li_4; Li_0++) G_ibuf_112[Li_0] = iMAOnArray(G_ibuf_108, 0, MA_Length, 0, MODE_EMA, Li_0);
   return (0);
}

int AVGVolume() {
   double Ld_0;
   double Ld_24;
   double Ld_32;
   double Ld_40;
   double Ld_48;
   double Ld_56;
   int Li_12 = IndicatorCounted();
   if (Li_12 > 0) Li_12--;
   if (Gi_100 == 0) Gi_100 = Bars - Li_12;
   int Li_8 = Gi_100;
   for (int Li_16 = 0; Li_16 < Li_8; Li_16++) {
      Ld_0 = 0;
      for (int Li_20 = Li_16; Li_20 < Li_16 + MA_Length; Li_20++) Ld_0 = Volume[Li_20] + Ld_0;
      G_ibuf_116[Li_16] = NormalizeDouble(Ld_0 / MA_Length, 0);
      G_ibuf_120[Li_16] = iVolume(NULL, 0, Li_16);
      Ld_24 = (High[Li_16 + 1] + (Low[Li_16 + 1])) / 2.0;
      Ld_32 = (High[Li_16 + 1] + (Low[Li_16 + 1])) / 2.0 + (High[Li_16 + 1] - (Low[Li_16 + 1])) / 3.6;
      Ld_40 = (High[Li_16 + 1] + (Low[Li_16 + 1])) / 2.0 - (High[Li_16 + 1] - (Low[Li_16 + 1])) / 3.6;
      if (High[Li_16 + 1] > High[Li_16 + 2] && G_ibuf_108[Li_16 + 1] > 1.8 * (G_ibuf_112[Li_16 + 1]) && Close[Li_16 + 1] < Ld_40 && G_ibuf_120[Li_16 + 1] > G_ibuf_120[Li_16 +
         2] && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1] && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 1, Li_16 + 1);
      if (High[Li_16 + 1] > High[Li_16 + 2] && G_ibuf_108[Li_16 + 1] > 1.8 * (G_ibuf_112[Li_16 + 1]) && Close[Li_16 + 1] < Ld_40 && G_ibuf_120[Li_16 + 1] > G_ibuf_120[Li_16 +
         2] && G_ibuf_120[Li_16 + 1] > 2.0 * (G_ibuf_116[Li_16 + 1])) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 2, Li_16 + 1);
      if (High[Li_16 + 1] > High[Li_16 + 2] && G_ibuf_108[Li_16 + 1] > 1.8 * (G_ibuf_112[Li_16 + 1]) && Close[Li_16 + 1] > Ld_40 && Close[Li_16 + 1] < Ld_32 && G_ibuf_120[Li_16 +
         1] > G_ibuf_120[Li_16 + 2] && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 3, Li_16 + 1);
      if (High[Li_16 + 1] > High[Li_16 + 2] && G_ibuf_108[Li_16 + 1] < G_ibuf_112[Li_16 + 1] && Close[Li_16 + 1] < Ld_40 && G_ibuf_120[Li_16 + 1] > G_ibuf_120[Li_16 + 2] &&
         G_ibuf_120[Li_16 + 1] < G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 4, Li_16 + 1);
      if (Close[Li_16 + 1] > Close[Li_16 + 2] && Close[Li_16 + 1] < Ld_24 && G_ibuf_108[Li_16 + 1] < 0.8 * (G_ibuf_112[Li_16 + 1]) && G_ibuf_120[Li_16 + 1] < G_ibuf_116[Li_16 +
         1]) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 5, Li_16 + 1);
      if (Close[Li_16 + 1] > Close[Li_16 + 2] && Close[Li_16 + 1] > Ld_32 && G_ibuf_108[Li_16 + 1] > 1.5 * (G_ibuf_112[Li_16 + 1]) && G_ibuf_120[Li_16 + 1] > G_ibuf_120[Li_16 +
         2]) TextOutput(Li_16, High[Li_16 + 1] + Gd_136, 6, Li_16 + 1);
      if (Close[Li_16 + 1] > Close[Li_16 + 2] && Close[Li_16 + 1] < Ld_24 && G_ibuf_108[Li_16 + 1] > 1.5 * (G_ibuf_112[Li_16 + 1]) && G_ibuf_120[Li_16 + 1] > G_ibuf_120[Li_16 +
         2] && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, Low[Li_16 + 1] - Gd_136, 7, Li_16 + 1);
      if (Close[Li_16 + 1] < Close[Li_16 + 2] && Close[Li_16 + 1] > Ld_32 && G_ibuf_120[Li_16 + 1] < G_ibuf_120[Li_16 + 2] && G_ibuf_120[Li_16 + 1] < G_ibuf_116[Li_16 +
         1]) TextOutput(Li_16, Low[Li_16 + 1] - Gd_136, 8, Li_16 + 1);
      if (Close[Li_16 + 1] < Close[Li_16 + 2] && Close[Li_16 + 1] > Ld_24 && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, Low[Li_16 + 1] - Gd_136, 9, Li_16 + 1);
      if (Close[Li_16 + 1] > Close[Li_16 + 2] && Close[Li_16 + 1] > Ld_24 && Low[Li_16 + 1] < Low[Li_16 + 2] && Low[Li_16 + 2] < Low[Li_16 + 3] && G_ibuf_108[Li_16 + 1] > 1.5 * (G_ibuf_112[Li_16 +
         1]) && G_ibuf_120[Li_16 + 1] > G_ibuf_116[Li_16 + 1]) TextOutput(Li_16, Low[Li_16 + 1] - Gd_136, 10, Li_16 + 1);
      if (Close[Li_16 + 1] < Close[Li_16 + 2] && Close[Li_16 + 1] < Ld_24 && G_ibuf_108[Li_16 + 1] < 0.8 * (G_ibuf_112[Li_16 + 1]) && G_ibuf_120[1] < G_ibuf_116[1]) TextOutput(Li_16, Low[Li_16 + 1] - Gd_136, 11, Li_16 + 1);
      if (ObjectFind("001Vol") == -1) {
         ObjectCreate("001Vol", OBJ_LABEL, 0, 0, 0);
         ObjectSet("001Vol", OBJPROP_COLOR, Red);
         ObjectSet("001Vol", OBJPROP_CORNER, Corner);
         ObjectSet("001Vol", OBJPROP_XDISTANCE, 5);
         ObjectSet("001Vol", OBJPROP_YDISTANCE, 15);
      }
      ObjectSetText("001Vol", "VOLUME: PENDING...", 10, "Tahoma Bold", White);
      if (G_ibuf_120[1] < G_ibuf_116[1] / 2.0) ObjectSetText("001Vol", "VOLUME: VERY LOW ", 10, "Tahoma Bold", Red);
      if (G_ibuf_120[1] < G_ibuf_116[1] && G_ibuf_120[1] > G_ibuf_116[1] / 2.0) ObjectSetText("001Vol", "VOLUME: LOW ", 10, "Tahoma Bold", Red);
      if (G_ibuf_120[1] > 2.0 * G_ibuf_116[1]) ObjectSetText("001Vol", "VOLUME: VERY HIGH", 10, "Tahoma Bold", Lime);
      if (G_ibuf_120[1] > G_ibuf_116[1] && G_ibuf_120[1] < 2.0 * G_ibuf_116[1]) ObjectSetText("001Vol", "VOLUME: HIGH", 10, "Tahoma Bold", Lime);
      if (ObjectFind("002") == -1) {
         ObjectCreate("002", OBJ_LABEL, 0, 0, 0);
         ObjectSet("002", OBJPROP_COLOR, Red);
         ObjectSet("002", OBJPROP_CORNER, Corner);
         ObjectSet("002", OBJPROP_XDISTANCE, 160);
         ObjectSet("002", OBJPROP_YDISTANCE, 15);
      }
      ObjectSetText("002", "SPREAD: NORMAL", 10, "Tahoma Bold", White);
      if (G_ibuf_108[1] > 1.8 * G_ibuf_112[1]) ObjectSetText("002", "SPREAD: WIDE", 10, "Tahoma Bold", Lime);
      if (G_ibuf_108[1] < 0.8 * G_ibuf_112[1]) ObjectSetText("002", "SPREAD: NARROW", 10, "Tahoma Bold", Red);
      if (ObjectFind("003") == -1) {
         ObjectCreate("003", OBJ_LABEL, 0, 0, 0);
         ObjectSet("003", OBJPROP_COLOR, Red);
         ObjectSet("003", OBJPROP_CORNER, Corner);
         ObjectSet("003", OBJPROP_XDISTANCE, 310);
         ObjectSet("003", OBJPROP_YDISTANCE, 15);
      }
      ObjectSetText("003", "BAR POS:PENDING..", 10, "Tahoma Bold", White);
      if (Close[1] > Close[2]) ObjectSetText("003", "BAR POS: UP BAR", 10, "Tahoma Bold", Lime);
      if (Close[1] < Close[2]) ObjectSetText("003", "BAR POS: DOWN BAR", 10, "Tahoma Bold", Red);
      Ld_48 = (High[1] + Low[1]) / 2.0 + (High[1] - Low[1]) / 3.6;
      Ld_56 = (High[1] + Low[1]) / 2.0 - (High[1] - Low[1]) / 3.6;
      if (ObjectFind("004") == -1) {
         ObjectCreate("004", OBJ_LABEL, 0, 0, 0);
         ObjectSet("004", OBJPROP_COLOR, Red);
         ObjectSet("004", OBJPROP_CORNER, Corner);
         ObjectSet("004", OBJPROP_XDISTANCE, 470);
         ObjectSet("004", OBJPROP_YDISTANCE, 15);
      }
      ObjectSetText("004", "BAR CLOSE: MIDCLOSE", 10, "Tahoma Bold", White);
      if (Close[1] > Ld_48) ObjectSetText("004", "BAR CLOSE: UP CLOSE", 10, "Tahoma Bold", Lime);
      if (Close[1] < Ld_56) ObjectSetText("004", "BAR CLOSE: DOWN CLOSE", 10, "Tahoma Bold", Red);
   }
   return (0);
}

void TextOutput(int Ai_0, double A_price_4, int Ai_12, int Ai_16) {
   string text_32;
   int time_20 = Time[Ai_0 + 1];
   string name_24 = "NDS_" + time_20;
   if (ObjectFind(name_24) >= 0) ObjectDelete(name_24);
   ObjectCreate(name_24, OBJ_TEXT, 0, time_20, A_price_4);
   ObjectSet(name_24, OBJPROP_ANGLE, AngleText);
   if (Ai_12 == 1) {
      text_32 = "UPTHRUST / Weakness_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 2) {
      text_32 = "HV UPTHRUST / Weakness_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 3) {
      text_32 = "LOW UPTHRUST / Demand stronger_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 4) {
      text_32 = "PSEUDO UPTHRUST / Weakness_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 5) {
      text_32 = "NO DEMAND / Weakness_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 6) {
      text_32 = "MARK UP / Strenght_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 7) {
      text_32 = "FAILED MARK UP / Weakness_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 8) {
      text_32 = "TESTING FOR SUPPLY / Strenght_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 9) {
      text_32 = "STOPPING VOLUME / Strenght_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 10) {
      text_32 = "REVERSE UPTHRUST / Strenght_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
   if (Ai_12 == 11) {
      text_32 = "NO SUPPLY / Strenght_" + Ai_16;
      ObjectSetText(name_24, text_32, SizeText, "Tahoma", White);
   }
}