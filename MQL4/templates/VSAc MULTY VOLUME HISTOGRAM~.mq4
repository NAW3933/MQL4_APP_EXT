/*
   Generated by ex4-to-mq4 decompiler FREEWARE 4.0.451.5
   Website:  H TT P : // W ww . m e T aQ U OTE s.n eT
   E-mail :  S UPPor T @ mE T AQU o TEs . n Et
*/
#property copyright "Copyright © 2008, FOREXflash Software Corp."
#property link      "http://www.metaquotes.net"

#property indicator_separate_window
#property indicator_buffers 8
#property indicator_color1 Red
#property indicator_color2 DeepSkyBlue
#property indicator_color3 Yellow
#property indicator_color4 Lime
#property indicator_color5 White
#property indicator_color6 Fuchsia
#property indicator_color7 Gray
#property indicator_color8 DarkOrange

extern int NumberOfBars = 500;
extern int MAPeriod = 100;
extern int LookBack = 20;
extern bool ShowText = TRUE;
extern int Corner = 1;
extern bool ShowOCLines = TRUE;
extern int OCPeriod = 14;
extern bool ShowBarTime = TRUE;
extern color Trending = C'0x23,0x23,0x23';
extern color Ranging = Black;
string G_fontname_116 = "Trebuchet MS";
int G_fontsize_124 = 13;
int G_color_128 = White;
int G_x_132 = 15;
int G_y_136 = 35;
bool Gi_140 = TRUE;
int G_color_144 = Black;
int G_fontsize_148 = 20;
string G_fontname_152 = "Arial Black";
int Gi_unused_160 = 1;
int G_str_len_164;
string Gs_168 = ":...:...:...:...:";
double Gd_176;
double Gd_184;
double G_ibuf_192[];
double G_ibuf_196[];
double G_ibuf_200[];
double G_ibuf_204[];
double G_ibuf_208[];
double G_ibuf_212[];
double G_ibuf_216[];
double G_ibuf_220[];
double G_bid_224;
bool Gi_232 = TRUE;
int G_timeframe_236 = 0;
int G_shift_240 = -1;

int init() {
   G_str_len_164 = StringLen(Gs_168);
   string Ls_0 = "2030.06.12";
   int str2time_8 = StrToTime(Ls_0);
   if (TimeCurrent() >= str2time_8) {
      Alert("The trial version expired! Contact forexflash@gmail.com");
      return (1);
   }
   SetIndexBuffer(0, G_ibuf_192);
   SetIndexStyle(0, DRAW_HISTOGRAM);
   SetIndexLabel(0, "Climax High ");
   SetIndexBuffer(1, G_ibuf_196);
   SetIndexStyle(1, DRAW_HISTOGRAM);
   SetIndexLabel(1, "Neutral");
   SetIndexBuffer(2, G_ibuf_200);
   SetIndexStyle(2, DRAW_HISTOGRAM);
   SetIndexLabel(2, "Low ");
   SetIndexBuffer(3, G_ibuf_204);
   SetIndexStyle(3, DRAW_HISTOGRAM);
   SetIndexLabel(3, "HighChurn ");
   SetIndexBuffer(4, G_ibuf_208);
   SetIndexStyle(4, DRAW_HISTOGRAM);
   SetIndexLabel(4, "Climax Low ");
   SetIndexBuffer(5, G_ibuf_212);
   SetIndexStyle(5, DRAW_HISTOGRAM);
   SetIndexLabel(5, "ClimaxChurn ");
   SetIndexBuffer(6, G_ibuf_216);
   SetIndexStyle(6, DRAW_LINE, STYLE_DOT, 1);
   SetIndexLabel(6, "Average(" + MAPeriod + ")");
   SetIndexBuffer(7, G_ibuf_220);
   SetIndexStyle(7, DRAW_HISTOGRAM, STYLE_SOLID);
   SetIndexLabel(7, "TickSeparateVolume");
   IndicatorShortName("VSA© MULTY VOLUME HISTOGRAM");
   if (ShowText == TRUE) draw_objects();
   return (0);
}

int deinit() {
   string name_4;
   for (int Li_0 = ObjectsTotal() - 1; Li_0 >= 0; Li_0--) {
      name_4 = ObjectName(Li_0);
      if (StringSubstr(name_4, 0, 8) == "Trend2") ObjectDelete(name_4);
   }
   if (ObjectFind("BarTimer1") != -1) ObjectDelete("BarTimer1");
   ObjectDelete("Market_Price_Label1");
   ObjectsDeleteAll(0, OBJ_LABEL);
   return (0);
}

int BarTimer() {
   int Li_0 = 0;
   int Li_4 = 0;
   double Ld_8 = 0.0;
   string str_concat_16 = "";
   string Ls_24 = "";
   string Ls_32 = "";
   ObjectCreate("BarTimer1", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSet("BarTimer1", OBJPROP_CORNER, Corner);
   ObjectSet("BarTimer1", OBJPROP_XDISTANCE, G_x_132);
   ObjectSet("BarTimer1", OBJPROP_YDISTANCE, G_y_136);
   Li_4 = TimeCurrent() - Time[0];
   Li_0 = (G_str_len_164 - 1) * Li_4 / (60 * Period());
   Ld_8 = 100.0 * Li_4 / (60 * Period());
   if (Li_0 > G_str_len_164 - 1) Li_0 = G_str_len_164 - 1;
   if (Li_0 > 0) Ls_32 = StringSubstr(Gs_168, 0, Li_0);
   if (Li_0 < G_str_len_164 - 1) Ls_24 = StringSubstr(Gs_168, Li_0 + 1, G_str_len_164 - Li_0 - 1);
   str_concat_16 = StringConcatenate(Ls_32, "|", Ls_24, "  ", DoubleToStr(Ld_8, 0), "%");
   ObjectSetText("BarTimer1", str_concat_16, G_fontsize_124, G_fontname_116, G_color_128);
   return (0);
}

int MPrice() {
   int Li_0;
   if (Gi_140 == TRUE) {
      if (Bid > G_bid_224) G_color_144 = LawnGreen;
      if (Bid < G_bid_224) G_color_144 = Red;
      G_bid_224 = Bid;
   }
   string Ls_4 = StringSubstr(Symbol(), 3, 3);
   if (Ls_4 == "JPY") Li_0 = 2;
   else Li_0 = 4;
   string dbl2str_12 = DoubleToStr(Bid, Li_0);
   ObjectCreate("Market_Price_Label1", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("Market_Price_Label1", dbl2str_12, G_fontsize_148, G_fontname_152, G_color_144);
   ObjectSet("Market_Price_Label1", OBJPROP_CORNER, Corner);
   ObjectSet("Market_Price_Label1", OBJPROP_XDISTANCE, 15);
   ObjectSet("Market_Price_Label1", OBJPROP_YDISTANCE, 144);
   return (0);
}

int start() {
   double volume_16;
   double Ld_24;
   double Ld_32;
   double Ld_40;
   double Ld_48;
   double Ld_56;
   double Ld_64;
   double Ld_72;
   double Ld_80;
   double Ld_88;
   string name_112;
   string Ls_0 = "2030.06.12";
   int str2time_8 = StrToTime(Ls_0);
   if (TimeCurrent() >= str2time_8) {
      Alert("The trial version expired! Contact forexflash@gmail.com");
      return (1);
   }
   TickVolumeDiff();
   if (ShowText == TRUE) {
      draw_objects();
      BarTimer();
      MPrice();
   }
   if (ShowOCLines == TRUE) OpenCloseLines();
   if (ShowBarTime == TRUE) BarTime();
   int window_12 = WindowFind("VSA© MULTY VOLUME HISTOGRAM");
   int Li_100 = IndicatorCounted();
   if (Li_100 > 0) Li_100--;
   if (NumberOfBars == 0) NumberOfBars = Bars - Li_100;
   int Li_96 = NumberOfBars;
   for (int Li_104 = 0; Li_104 < Li_96; Li_104++) {
      G_ibuf_192[Li_104] = 0;
      G_ibuf_196[Li_104] = Volume[Li_104];
      G_ibuf_200[Li_104] = 0;
      G_ibuf_204[Li_104] = 0;
      G_ibuf_208[Li_104] = 0;
      G_ibuf_212[Li_104] = 0;
      Ld_32 = 0;
      Ld_40 = 0;
      Ld_48 = 0;
      Ld_56 = 0;
      Ld_64 = 99999999;
      Ld_72 = 0;
      Ld_80 = 0;
      Ld_88 = 0;
      volume_16 = Volume[iLowest(NULL, 0, MODE_VOLUME, 20, Li_104)];
      if (Volume[Li_104] == volume_16) {
         G_ibuf_200[Li_104] = NormalizeDouble(Volume[Li_104], 0);
         G_ibuf_196[Li_104] = 0;
      }
      Ld_24 = High[Li_104] - Low[Li_104];
      Ld_32 = Volume[Li_104] * Ld_24;
      if (Ld_24 != 0.0) Ld_40 = Volume[Li_104] / Ld_24;
      for (int Li_108 = Li_104; Li_108 < Li_104 + MAPeriod; Li_108++) Ld_88 = Volume[Li_108] + Ld_88;
      G_ibuf_216[Li_104] = NormalizeDouble(Ld_88 / MAPeriod, 0);
      for (Li_108 = Li_104; Li_108 < Li_104 + LookBack; Li_108++) {
         Ld_72 = Volume[Li_108] * (High[Li_108] - Low[Li_108]);
         if (Ld_72 >= Ld_48) Ld_48 = Ld_72;
         if (Volume[Li_108] * (High[Li_108] - Low[Li_108]) != 0.0) {
            Ld_80 = Volume[Li_108] / (High[Li_108] - Low[Li_108]);
            if (Ld_80 > Ld_56) Ld_56 = Ld_80;
            if (Ld_80 < Ld_64) Ld_64 = Ld_80;
         }
      }
      if (Ld_32 == Ld_48 && Close[Li_104] > (High[Li_104] + Low[Li_104]) / 2.0) {
         G_ibuf_192[Li_104] = NormalizeDouble(Volume[Li_104], 0);
         G_ibuf_196[Li_104] = 0;
         G_ibuf_200[Li_104] = 0;
      }
      if (Ld_40 == Ld_56) {
         G_ibuf_204[Li_104] = NormalizeDouble(Volume[Li_104], 0);
         G_ibuf_196[Li_104] = 0;
         G_ibuf_200[Li_104] = 0;
         G_ibuf_192[Li_104] = 0;
      }
      if (Ld_32 == Ld_48 && Ld_40 == Ld_56) {
         G_ibuf_212[Li_104] = NormalizeDouble(Volume[Li_104], 0);
         G_ibuf_196[Li_104] = 0;
         G_ibuf_192[Li_104] = 0;
         G_ibuf_204[Li_104] = 0;
         G_ibuf_200[Li_104] = 0;
      }
      if (Ld_32 == Ld_48 && Close[Li_104] <= (High[Li_104] + Low[Li_104]) / 2.0) {
         G_ibuf_208[Li_104] = NormalizeDouble(Volume[Li_104], 0);
         G_ibuf_212[Li_104] = 0;
         G_ibuf_196[Li_104] = 0;
         G_ibuf_192[Li_104] = 0;
         G_ibuf_204[Li_104] = 0;
         G_ibuf_200[Li_104] = 0;
      }
   }
   int count_120 = 0;
   for (Li_104 = Li_96 - 1; Li_104 > 0; Li_104--) {
      if (Volume[Li_104] > G_ibuf_216[Li_104]) {
         count_120++;
         name_112 = "Trend2" + count_120;
         if (ObjectFind(name_112) == -1) ObjectCreate(name_112, OBJ_RECTANGLE, window_12, 0, 0);
         ObjectSet(name_112, OBJPROP_COLOR, Ranging);
         ObjectSet(name_112, OBJPROP_PRICE1, 100000000);
         ObjectSet(name_112, OBJPROP_PRICE2, -100000000);
         ObjectSet(name_112, OBJPROP_TIME1, Time[Li_104]);
         ObjectSet(name_112, OBJPROP_TIME2, Time[Li_104 - 1]);
      } else {
         if (Volume[Li_104] < G_ibuf_216[Li_104]) {
            count_120++;
            name_112 = "Trend2" + count_120;
            if (ObjectFind(name_112) == -1) ObjectCreate(name_112, OBJ_RECTANGLE, window_12, 0, 0);
            ObjectSet(name_112, OBJPROP_COLOR, Trending);
            ObjectSet(name_112, OBJPROP_PRICE1, 100000000);
            ObjectSet(name_112, OBJPROP_PRICE2, -100000000);
            ObjectSet(name_112, OBJPROP_TIME1, Time[Li_104]);
            ObjectSet(name_112, OBJPROP_TIME2, Time[Li_104 - 1]);
         } else ObjectSet(name_112, OBJPROP_TIME2, Time[Li_104 - 1]);
      }
   }
   return (0);
}

void TickVolumeDiff() {
   int shift_4;
   for (int Li_0 = 0; Li_0 < iBars(Symbol(), PERIOD_M1); Li_0++) {
      shift_4 = iBarShift(Symbol(), Period(), iTime(Symbol(), PERIOD_M1, Li_0), TRUE);
      if (G_shift_240 != shift_4) {
         Gd_176 = 0;
         Gd_184 = 0;
         G_ibuf_220[shift_4] = 0;
      }
      if (shift_4 != -1) {
         if (iClose(Symbol(), PERIOD_M1, Li_0) > iClose(Symbol(), PERIOD_M1, Li_0 + 1)) Gd_176 += iVolume(Symbol(), PERIOD_M1, Li_0);
         if (iClose(Symbol(), PERIOD_M1, Li_0) < iClose(Symbol(), PERIOD_M1, Li_0 + 1)) Gd_184 -= iVolume(Symbol(), PERIOD_M1, Li_0);
         if (iClose(Symbol(), PERIOD_M1, Li_0) == iClose(Symbol(), PERIOD_M1, Li_0 + 1)) {
            Gd_176 += iVolume(Symbol(), PERIOD_M1, Li_0) / 2.0;
            Gd_184 -= iVolume(Symbol(), PERIOD_M1, Li_0) / 2.0;
         }
      }
      G_ibuf_220[shift_4] = (Gd_176 + Gd_184) / 2.0;
      G_shift_240 = shift_4;
   }
}

void draw_objects() {
   ObjectCreate("VBox", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("VBox", "V  S  A  ®", 14, "Trebuchet MS", Orange);
   ObjectSet("VBox", OBJPROP_CORNER, Corner);
   ObjectSet("VBox", OBJPROP_XDISTANCE, 15);
   ObjectSet("VBox", OBJPROP_YDISTANCE, 1);
   ObjectCreate("VBox1", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("VBox1", "Better/Tick Separate Volume", 8, "Trebuchet MS", Gray);
   ObjectSet("VBox1", OBJPROP_CORNER, Corner);
   ObjectSet("VBox1", OBJPROP_XDISTANCE, 15);
   ObjectSet("VBox1", OBJPROP_YDISTANCE, 18);
   string dbl2str_0 = DoubleToStr(G_ibuf_220[0], 1);
   ObjectCreate("TSV", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("TSV", "TICK SEPARATE VOLUME: " + dbl2str_0 + "", 13, "Trebuchet MS", White);
   ObjectSet("TSV", OBJPROP_CORNER, Corner);
   ObjectSet("TSV", OBJPROP_XDISTANCE, 15);
   ObjectSet("TSV", OBJPROP_YDISTANCE, 58);
   if (G_ibuf_220[0] >= 1.0) ObjectSetText("TSV", "TICK VOLUME: " + dbl2str_0 + "", 13, "Trebuchet MS", Lime);
   if (G_ibuf_220[0] <= 1.0) ObjectSetText("TSV", "TICK VOLUME: " + dbl2str_0 + "", 13, "Trebuchet MS", Red);
   ObjectCreate("TSV2", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("TSV2", "TICK VOLUME IS BELOW AVERAGE.", 8, "Trebuchet MS", White);
   ObjectSet("TSV2", OBJPROP_CORNER, Corner);
   ObjectSet("TSV2", OBJPROP_XDISTANCE, 15);
   ObjectSet("TSV2", OBJPROP_YDISTANCE, 76);
   if (G_ibuf_220[0] > G_ibuf_220[1] && G_ibuf_220[0] > G_ibuf_220[2] && G_ibuf_220[0] > G_ibuf_220[3] && G_ibuf_220[0] > G_ibuf_220[4] && G_ibuf_220[0] > G_ibuf_220[5] &&
      G_ibuf_220[0] > G_ibuf_220[6] && G_ibuf_220[0] > G_ibuf_220[7] && G_ibuf_220[0] > G_ibuf_220[8] && G_ibuf_220[0] > G_ibuf_220[9] && G_ibuf_220[0] > G_ibuf_220[10]) ObjectSetText("TSV2", "TICK VOLUME IS ABOVE AVERAGE!!!", 8, "Trebuchet MS", Orange);
   string dbl2str_8 = DoubleToStr(G_ibuf_216[0], 1);
   ObjectCreate("v4MA", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("v4MA", "AVERAGE VOLUME:" + dbl2str_8, 13, "Trebuchet MS", Lime);
   ObjectSet("v4MA", OBJPROP_CORNER, Corner);
   ObjectSet("v4MA", OBJPROP_XDISTANCE, 15);
   ObjectSet("v4MA", OBJPROP_YDISTANCE, 92);
   ObjectCreate("BA_v4MA", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("BA_v4MA", "VOLUME IS BELOW AVERAGE.", 8, "Trebuchet MS", White);
   ObjectSet("BA_v4MA", OBJPROP_CORNER, Corner);
   ObjectSet("BA_v4MA", OBJPROP_XDISTANCE, 15);
   ObjectSet("BA_v4MA", OBJPROP_YDISTANCE, 110);
   if (G_ibuf_216[0] > G_ibuf_216[1] && G_ibuf_216[0] > G_ibuf_216[2] && G_ibuf_216[0] > G_ibuf_216[3] && G_ibuf_216[0] > G_ibuf_216[4] && G_ibuf_216[0] > G_ibuf_216[5] &&
      G_ibuf_216[0] > G_ibuf_216[6] && G_ibuf_216[0] > G_ibuf_216[7] && G_ibuf_216[0] > G_ibuf_216[8] && G_ibuf_216[0] > G_ibuf_216[9] && G_ibuf_216[0] > G_ibuf_216[10] &&
      G_ibuf_216[0] > G_ibuf_216[11] && G_ibuf_216[0] > G_ibuf_216[12] && G_ibuf_216[0] > G_ibuf_216[13] && G_ibuf_216[0] > G_ibuf_216[14] && G_ibuf_216[0] > G_ibuf_216[15] &&
      G_ibuf_216[0] > G_ibuf_216[16] && G_ibuf_216[0] > G_ibuf_216[17] && G_ibuf_216[0] > G_ibuf_216[18] && G_ibuf_216[0] > G_ibuf_216[19] && G_ibuf_216[0] > G_ibuf_216[20]) ObjectSetText("BA_v4MA", "VOLUME IS ABOVE AVERAGE!!!", 8, "Trebuchet MS", Red);
   ObjectCreate("BetterVol", OBJ_LABEL, WindowFind("VSA© MULTY VOLUME HISTOGRAM"), 0, 0);
   ObjectSetText("BetterVol", "PENDING BAR SIGNAL...", 13, "Trebuchet MS", Gray);
   ObjectSet("BetterVol", OBJPROP_CORNER, Corner);
   ObjectSet("BetterVol", OBJPROP_XDISTANCE, 15);
   ObjectSet("BetterVol", OBJPROP_YDISTANCE, 127);
   if (G_ibuf_208[1] > 1.0) ObjectSetText("BetterVol", "*Start/End of down trend_Pullback during up trend*", 10, "Trebuchet MS", White);
   if (G_ibuf_192[1] > 1.0) ObjectSetText("BetterVol", "*Start/End of up trend_Pullback during down trend*", 10, "Trebuchet MS", Red);
   if (G_ibuf_204[1] > 1.0) ObjectSetText("BetterVol", "*End of up/down trend_Profit taking mid-trend*", 10, "Trebuchet MS", Lime);
   if (G_ibuf_212[1] > 1.0) ObjectSetText("BetterVol", "*Seen on tops and bottoms_Reversal or continuation*", 10, "Trebuchet MS", Fuchsia);
   if (G_ibuf_200[1] > 1.0) ObjectSetText("BetterVol", "*End of up/down trend_Pullback mid-trend*", 10, "Trebuchet MS", Yellow);
   if (G_ibuf_196[1] > 1.0) ObjectSetText("BetterVol", "*No signal_Neutral*", 10, "Trebuchet MS", DeepSkyBlue);
}

int OpenCloseLines() {
   double iclose_0 = iClose(NULL, PERIOD_D1, iHighest(NULL, PERIOD_D1, MODE_CLOSE, OCPeriod, 1));
   double iclose_8 = iClose(NULL, PERIOD_H4, iHighest(NULL, PERIOD_H4, MODE_CLOSE, OCPeriod, 1));
   double iclose_16 = iClose(NULL, PERIOD_H1, iHighest(NULL, PERIOD_H1, MODE_CLOSE, OCPeriod, 1));
   double iclose_24 = iClose(NULL, PERIOD_M30, iHighest(NULL, PERIOD_M30, MODE_CLOSE, OCPeriod, 1));
   double iclose_32 = iClose(NULL, PERIOD_M15, iHighest(NULL, PERIOD_M15, MODE_CLOSE, OCPeriod, 1));
   double iclose_40 = iClose(NULL, PERIOD_D1, iLowest(NULL, PERIOD_D1, MODE_CLOSE, OCPeriod, 1));
   double iclose_48 = iClose(NULL, PERIOD_H4, iLowest(NULL, PERIOD_H4, MODE_CLOSE, OCPeriod, 1));
   double iclose_56 = iClose(NULL, PERIOD_H1, iLowest(NULL, PERIOD_H1, MODE_CLOSE, OCPeriod, 1));
   double iclose_64 = iClose(NULL, PERIOD_M30, iLowest(NULL, PERIOD_M30, MODE_CLOSE, OCPeriod, 1));
   double iclose_72 = iClose(NULL, PERIOD_M15, iLowest(NULL, PERIOD_M15, MODE_CLOSE, OCPeriod, 1));
   drawLine("HH_D1", Time[36], Time[30], iclose_0, iclose_0, 3, FALSE, Lime, 1);
   drawLine("HH_H4", Time[30], Time[24], iclose_8, iclose_8, 3, FALSE, Lime, 1);
   drawLine("HH_H1", Time[18], Time[12], iclose_16, iclose_16, 3, FALSE, Lime, 2);
   drawLine("HH_M30", Time[12], Time[6], iclose_24, iclose_24, 3, FALSE, Lime, 2);
   drawLine("HH_M15", Time[6], Time[0], iclose_32, iclose_32, 3, FALSE, Lime, 1);
   drawLine("LL_D1", Time[36], Time[30], iclose_40, iclose_40, 3, FALSE, Red, 1);
   drawLine("LL_H4", Time[30], Time[24], iclose_48, iclose_48, 3, FALSE, Red, 1);
   drawLine("LL_H1", Time[18], Time[12], iclose_56, iclose_56, 3, FALSE, Red, 2);
   drawLine("LL_M30", Time[12], Time[6], iclose_64, iclose_64, 3, FALSE, Red, 2);
   drawLine("LL_M15", Time[6], Time[0], iclose_72, iclose_72, 3, FALSE, Red, 1);
   drawTXTLabel("D1 Bar HC", iclose_0, Time[33], White);
   drawTXTLabel("H4 Bar HC", iclose_8, Time[27], White);
   drawTXTLabel("H1 Bar HC", iclose_16, Time[15], White);
   drawTXTLabel("M30 Bar HC", iclose_24, Time[9], White);
   drawTXTLabel("M15 Bar HC", iclose_32, Time[3], White);
   drawTXTLabel("D1 Bar LC", iclose_40, Time[33], White);
   drawTXTLabel("H4 Bar LC", iclose_48, Time[27], White);
   drawTXTLabel("H1 Bar LC", iclose_56, Time[15], White);
   drawTXTLabel("M30 Bar LC", iclose_64, Time[9], White);
   drawTXTLabel("M15 Bar LC", iclose_72, Time[3], White);
   return (0);
}

void drawTXTLabel(string A_name_0, double A_price_8, int A_datetime_16, color A_color_20) {
   if (ObjectFind(A_name_0) != 0) {
      ObjectCreate(A_name_0, OBJ_TEXT, 0, A_datetime_16, A_price_8);
      ObjectSetText(A_name_0, A_name_0, 8, "Tahoma", CLR_NONE);
      ObjectSet(A_name_0, OBJPROP_COLOR, A_color_20);
      return;
   }
   ObjectMove(A_name_0, 0, A_datetime_16, A_price_8);
}

void drawLine(string A_name_0, int A_datetime_8, int A_datetime_12, double A_price_16, double A_price_24, int Ai_unused_32, int A_bool_36, color A_color_40, int Ai_44) {
   if (ObjectFind(A_name_0) != 0) {
      ObjectCreate(A_name_0, OBJ_TREND, 0, A_datetime_8, A_price_16, A_datetime_12, A_price_24);
      if (Ai_44 == 1) ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_SOLID);
      else {
         if (Ai_44 == 2) ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_DASHDOT);
         else ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_DOT);
      }
      ObjectSet(A_name_0, OBJPROP_COLOR, A_color_40);
      ObjectSet(A_name_0, OBJPROP_WIDTH, 2);
      ObjectSet(A_name_0, OBJPROP_RAY, A_bool_36);
      return;
   }
   ObjectDelete(A_name_0);
   ObjectCreate(A_name_0, OBJ_TREND, 0, A_datetime_8, A_price_16, A_datetime_12, A_price_24);
   if (Ai_44 == 1) ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_SOLID);
   else {
      if (Ai_44 == 2) ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_DASHDOT);
      else ObjectSet(A_name_0, OBJPROP_STYLE, STYLE_DOT);
   }
   ObjectSet(A_name_0, OBJPROP_COLOR, A_color_40);
   ObjectSet(A_name_0, OBJPROP_WIDTH, 2);
   ObjectSet(A_name_0, OBJPROP_RAY, A_bool_36);
}

void BarTime() {
   if (G_timeframe_236 == 0) G_timeframe_236 = Period();
   int Li_64 = iTime(NULL, G_timeframe_236, 0) + 60 * G_timeframe_236 - TimeCurrent();
   int Li_80 = iTime(NULL, PERIOD_D1, 0) + 86400 - TimeCurrent();
   int Li_84 = iTime(NULL, PERIOD_H4, 0) + 14400 - TimeCurrent();
   int Li_88 = iTime(NULL, PERIOD_H1, 0) + 3600 - TimeCurrent();
   int Li_92 = iTime(NULL, PERIOD_M30, 0) + 1800 - TimeCurrent();
   int Li_96 = iTime(NULL, PERIOD_M15, 0) + 900 - TimeCurrent();
   int Li_100 = iTime(NULL, PERIOD_M5, 0) + 300 - TimeCurrent();
   int Li_104 = iTime(NULL, PERIOD_M1, 0) + 60 - TimeCurrent();
   double Ld_0 = Li_64 / 60.0;
   double Ld_8 = Li_80 / 60.0;
   double Ld_16 = Li_84 / 60.0;
   double Ld_24 = Li_88 / 60.0;
   double Ld_32 = Li_92 / 60.0;
   double Ld_40 = Li_96 / 60.0;
   double Ld_48 = Li_100 / 60.0;
   double Ld_56 = Li_104 / 60.0;
   int Li_68 = Li_64 % 60;
   int Li_108 = Li_64 % 60;
   int Li_112 = Li_80 % 60;
   int Li_116 = Li_84 % 60;
   int Li_120 = Li_88 % 60;
   int Li_124 = Li_92 % 60;
   int Li_128 = Li_96 % 60;
   int Li_132 = Li_100 % 60;
   int Li_136 = Li_104 % 60;
   Li_64 = (Li_64 - Li_64 % 60) / 60;
   int Li_76 = (Li_64 - Li_64 % 60) / 60;
   Li_80 = (Li_80 - Li_80 % 60) / 60;
   Li_84 = (Li_84 - Li_84 % 60) / 60;
   Li_88 = (Li_88 - Li_88 % 60) / 60;
   Li_92 = (Li_92 - Li_92 % 60) / 60;
   Li_96 = (Li_96 - Li_96 % 60) / 60;
   Li_100 = (Li_100 - Li_100 % 60) / 60;
   Li_104 = (Li_104 - Li_104 % 60) / 60;
   int Li_140 = Li_64 / 60;
   int Li_144 = Li_80 / 60;
   int Li_148 = Li_84 / 60;
   int Li_152 = Li_88 / 60;
   int Li_156 = Li_92 / 60;
   int Li_160 = Li_96 / 60;
   int Li_164 = Li_100 / 60;
   int Li_168 = Li_104 / 60;
   string Ls_172 = "                   <" + Li_64 + ":" + Li_68;
   string Ls_180 = "[M1] " + Li_104 + "m :" + Li_136;
   string Ls_188 = "[M5] " + Li_100 + "m :" + Li_132;
   string Ls_196 = "[M15] " + Li_96 + "m :" + Li_128;
   string Ls_204 = "[M30] " + Li_92 + "m :" + Li_124;
   string Ls_212 = "[M60] " + Li_88 + "m :" + Li_120;
   string Ls_220 = "[H4] " + Li_84 + "m :" + Li_116;
   string Ls_228 = "[D1] " + Li_80 + "m :" + Li_112;
   ObjectDelete("time");
   if (ObjectFind("time") != 0) {
      if (Gi_232) {
         ObjectCreate("time", OBJ_TEXT, 0, Time[0], Close[0] + 0.0);
         WindowRedraw();
      }
      if (Gi_232) {
         ObjectSetText("time", StringSubstr(Ls_172, 0), 9, "Tahoma", White);
         WindowRedraw();
      }
   } else ObjectMove("time", 0, Time[0], Close[0] + 0.0005);
}